{"version":3,"sources":["webpack:///./src/templates/item-template.js"],"names":["Wrapper","styled","div","Itemcss","colors","bg","fg","fonts","sans","serif","hl","ItemPage","props","pages","transcriptions","find","id","item","map","i","onClick","NavToPage","pathname","pageid","setPageType","className","src","pagefilename","status","transcription","title","desc","href","cataloglink","progressData","progress","currLoc","page","newUrl","navigate","state","withLocation","console","log","pageContext","location","useState","undefined","search","pageType","count","transcount","percentTranscribed","styles","css","charSet","image"],"mappings":"orFAeA,IAAMA,EAAUC,IAAOC,IAAV,KASPC,EAAUF,IAAOC,IAAV,IAEUE,IAAOC,GACZD,IAAOE,GACaF,IAAOE,GAG1BC,IAAMC,KACIJ,IAAOE,GAEbC,IAAME,MAiBPL,IAAOE,GACqCF,IAAOM,GA4B/BN,IAAOE,GAChBF,IAAOE,GAKMF,IAAOE,GAChBF,IAAOE,GAMXF,IAAOE,GAGJF,IAAOE,GAONF,IAAOE,IA4CtCK,EAAW,SAAAC,GACb,IACMC,EADIC,EAAc,eAAmBC,MAAM,qBAAGC,KAAgBJ,EAAMK,KAAKD,MAC7DH,MAAMK,KAAI,SAAAC,GAAC,OACzB,yBAAKC,QAAS,kBAAMC,EAAUT,EAAMU,SAAUH,EAAEI,OAAQX,EAAMY,cAAeC,UAAU,YACnF,yBAAKA,UAAU,YAAYC,IAAK,yFAA2FP,EAAEQ,eAC7H,kBAAC,IAAD,CAAgBC,SAAQT,EAAEU,oBAGlC,OAAS,yBAAKJ,UAAU,kBACxB,4BAAKb,EAAMK,KAAKa,OAChB,2BAAIlB,EAAMK,KAAKc,MACf,2BAAG,uBAAGC,KAAMpB,EAAMK,KAAKgB,aAApB,wBACH,kBAAC,IAAD,CAAUC,aAActB,EAAMuB,WAC9B,yBAAKV,UAAU,SACVZ,KAKHQ,EAAY,SAACe,EAASC,EAAMb,GAC9B,IAAIc,EAASF,EAAU,SAAWC,EAClCb,EAAY,QACZe,mBACID,EACA,CACIE,MAAO,CAAEF,aAKNG,uBAtEF,SAAE7B,GACX8B,QAAQC,IAAI/B,EAAMgC,aAClB,IAAM3B,EAAOL,EAAMgC,YACvBF,QAAQC,IAAI/B,EAAMiC,SAASvB,UAHD,MAIawB,wBAA+BC,IAAtBnC,EAAMoC,OAAOX,KAAqB,OAAS,QAA/EY,EAJc,KAIJzB,EAJI,KAMhBW,EAAW,CACbe,MAAOjC,EAAKiC,MACZC,WAAYlC,EAAKkC,WACjBC,mBAAoBnC,EAAKmC,oBAE7B,OACI,kBAACpD,EAAD,KACA,kBAAC,IAAD,CAAQqD,OAAQC,YAAF,OASjB,kBAAC,IAAD,KACC,0BAAMC,QAAQ,UACd,uDAEE,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAYC,MAAOvC,EAAKuC,MAAQ,8BAChC,kBAAC,IAAD,MACI,kBAACrD,EAAD,KACI,yBAAKsB,UAAU,kBACG,SAAbwB,EAAsB,kBAACtC,EAAD,CAAUa,YAAaA,EAAaP,KAAMA,EAAMK,SAAUV,EAAMiC,SAASvB,SAAUa,SAAUA,IAAe,4BAAQT,IAAG,qFAAuFT,EAAKD,GAA5F,IAAkGJ,EAAMoC,OAAOX,KAA/G,qBAItJ,kBAAC,IAAD,W","file":"component---src-templates-item-template-js-b6700c348fc96a49faf4.js","sourcesContent":["import React, { useState } from \"react\"\nimport { Global, css } from \"@emotion/core\"\nimport Helmet from 'react-helmet'\nimport styled from '@emotion/styled'\nimport { navigate } from \"gatsby\"\nimport Background from '../components/background'\nimport { colors, fonts } from '../components/csscomponents'\nimport Footer from '../components/footer'\nimport Topbar from '../components/topbar'\nimport { Simpleprogress } from \"../components/progress\"\nimport BetaBanner from '../components/beta'\nimport Progress from '../components/progress'\nimport transcriptions from '../data/itemTranscriptions.json'\nimport withLocation from \"../components/withlocation\"\n\nconst Wrapper = styled.div`\n    position: relative;\n    margin: 0;\n    padding: 0;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n`\nconst Itemcss = styled.div`\n    width: 60%;\n    background: rgba(${colors.bg});\n    color: rgba(${colors.fg});\n    box-shadow: inset 0 0 10px rgba(${colors.fg},1);\n    margin: 80px auto;\n    padding: 2vw;\n    font-family: ${fonts.sans};\n    border: 2px solid rgba(${colors.fg},0.7);\n    h1, h3 {\n        font-family: ${fonts.serif};\n        margin: 12px 0;\n    }\n    h3 {\n        font-size: 1.5rem;\n    }\n    ul {\n        li {\n            padding: 5px 0;\n        }\n    }\n    p { \n        margin-bottom: 12px;\n    }\n    a {\n        font-weight: 900;\n        text-decoration: none;\n        color: rgba(${colors.fg}, 1);\n        background-image: linear-gradient(transparent 1px, rgba(${colors.hl},1) 1px);\n        background-size: 0% 1px;\n        background-position: 0% 101%;\n        background-repeat: no-repeat;\n        transition: background-size 0.2s ease 0s;\n        &:hover {\n            background-size: 100% 2px;\n        }\n        \n    }\n    .itemheaderimage {\n        padding: 10px 20px;\n        float: left;\n    }\n    &::after {\n        content: \"\";\n        clear: both;\n        display: table;\n    }\n    .pages {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    .pagelink {\n        cursor: pointer;\n        flex: 1;\n        min-width: 300px;\n        display: block;\n        box-shadow: inset 0 0 10px rgba(${colors.fg},1);\n        border: 2px solid rgba(${colors.fg},1);\n        padding: 10px;\n        margin: 10px;\n        transition: all 0.15s;\n        &:hover {\n            box-shadow: inset 0 0 10px rgba(${colors.fg},0.5);\n            border: 2px solid rgba(${colors.fg},0.5);\n\n        }\n    }\n    .pageimage {\n        height: 250px;\n        border: 2px solid rgba(${colors.fg},1);\n        margin: auto;\n        display: block;\n        box-shadow:  0 0 8px rgba(${colors.fg},1);\n    }\n    iframe {\n        border-radius: 5px;\n        width: 100%; \n        height: 80vh;\n        overflow: auto;\n        box-shadow:  0 0 10px rgba(${colors.fg},1);\n    }\n`\n\nconst Item = ( props ) => {\n    console.log(props.pageContext)\n    const item = props.pageContext\nconsole.log(props.location.pathname)\n    const [ pageType, setPageType ]  = useState(props.search.page === undefined ? 'item' : 'page')\n\n    const progress = {\n        count: item.count,\n        transcount: item.transcount,\n        percentTranscribed: item.percentTranscribed,\n    }\n    return (\n        <Wrapper >\n        <Global styles={css`\n            html, body {\n                margin: 0;\n                padding: 0;\n                position: relative;\n                z-index: 1;\n            }\n        `}/>\n\n     <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>Newberry Transcribe</title>\n    </Helmet>\n        <Topbar  />\n        <Background image={item.image + '/full/1000,/0/default.jpg'}/>\n        <BetaBanner />\n            <Itemcss>\n                <div className=\"itemheadertext\">\n                    {pageType === 'item' ? <ItemPage setPageType={setPageType} item={item} pathname={props.location.pathname} progress={progress} /> : <iframe src={`https://publications.newberry.org/transcription/mms-transcribe/scripto/transcribe/${item.id}/${props.search.page}#transcription`} />}\n                  \n                </div>\n            </Itemcss>\n            <Footer />\n        </Wrapper>\n    )\n}\n\nconst ItemPage = props => {\n    let uhh = transcriptions['transcriptions'].find( ({ id }) => id === props.item.id )\n    const pages = uhh.pages.map(i => \n        <div onClick={() => NavToPage(props.pathname, i.pageid, props.setPageType) } className=\"pagelink\">\n            <img className=\"pageimage\" src={'http://publications.newberry.org/transcription/mms-transcribe/files/square_thumbnails/' + i.pagefilename} />\n            <Simpleprogress status={i.transcription ? true : false} />\n        </div>\n    )\n    return ( <div className=\"itemheadertext\">\n    <h1>{props.item.title}</h1>\n    <p>{props.item.desc}</p>\n    <p><a href={props.item.cataloglink}>View Catalog Record</a></p>\n    <Progress progressData={props.progress} />\n    <div className=\"pages\">\n        {pages}\n    </div>\n</div>)\n}\n\nconst NavToPage = (currLoc, page, setPageType) => {\n    let newUrl = currLoc + '?page=' + page\n    setPageType('page')\n    navigate(\n        newUrl, \n        {\n            state: { newUrl },\n        }\n    )\n}\n\nexport default withLocation(Item)\n"],"sourceRoot":""}